{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[13],{O4ON:function(r,t,i){\"use strict\";i.r(t),i.d(t,\"CheckInputContainCapitalLetters\",(function(){return e}));class e{constructor(){this.validationErrorArray=[]}validate(r,t,i,e,n){let o=typeof t,a=function(r){return r.length>0||0!==r.length&&void 0},s=0,u=function(r){for(let t=0;t<r.length;t++)r[t]===r[t].toUpperCase()&&r[t]!==r[t].toLowerCase()&&s++};if(\"boolean\"===o){if(!0===t){if(!/[a-z]/.test(e))return!0;this.validationErrorArray.push(i,n)}if(!1===t){if(!/[A-Z]/.test(e))return!0;this.validationErrorArray.push(i,n)}}else if(\"number\"===o&&a(e)){if(u(e),t===s)return!0;this.validationErrorArray.push(i,n)}else if(\"object\"===o&&a(e)){let r=t[0],o=t[1],a=typeof r,f=typeof o;if(!0===r&&\"number\"===f){if(u(e),!(0===s||s>o))return!0;this.validationErrorArray.push(i,n)}else if(\"number\"===a&&!0===o){if(u(e),!(0===s||s<r))return!0;this.validationErrorArray.push(i,n)}else if(\"number\"===a&&\"number\"===f){if(u(e),!(s<r||s>o))return!0;this.validationErrorArray.push(i,n)}}}}}}]);","map":{"version":3,"sources":["static/chunks/13.61118903ec06aeff875f.js"],"names":["window","push","O4ON","module","__webpack_exports__","__webpack_require__","r","d","CheckInputContainCapitalLetters","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","typeofPropertyValue","inputIsBeingUsed","length","numberOfCapitalLetters","capitalLettersCounter","i","toUpperCase","toLowerCase","test","propertyValueMinimum","propertyValueMaximum","typeofPropertyValueMinimum","typeofPropertyValueMaximum"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,mCAAmC,WAAa,OAAOI,KAEjI,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAKhCF,SAASG,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,SAA6B,EAI7BC,EAAmB,SAASH,GAC5B,OAAGA,EAAeI,OAAS,GAGE,IAA1BJ,EAAeI,aAAlB,GAMAC,EAAyB,EACzBC,EAAwB,SAAUN,GAClC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAeI,OAAQG,IACnCP,EAAeO,KAAOP,EAAeO,GAAGC,eACrCR,EAAeO,KAAOP,EAAeO,GAAGE,eAC3CJ,KAKZ,GAA4B,YAAxBH,EAAmC,CACnC,IAAsB,IAAlBJ,EAAwB,CAIxB,IAHY,QAGFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAcE,GAMrD,IAAsB,IAAlBH,EAAyB,CAGzB,IAFY,QAEFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAcE,SAMlD,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAI7E,GAFAM,EAAsBN,GAElBF,IAAkBO,EAGlB,OAAO,EAFPV,KAAKC,qBAAqBV,KAAKa,EAAcE,QAK9C,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAC7E,IAAIW,EAAuBb,EAAc,GACrCc,EAAuBd,EAAc,GACrCe,SAAoC,EACpCC,SAAoC,EAGxC,IAA6B,IAAzBH,GAAgE,WAA/BG,EAAyC,CAG1E,GADAR,EAAsBN,KACS,IAA3BK,GAAgCA,EAAyBO,GAGzD,OAAO,EAFPjB,KAAKC,qBAAqBV,KAAKa,EAAcE,QAK9C,GAAmC,WAA/BY,IAAoE,IAAzBD,EAA+B,CAEjF,GADAN,EAAsBN,KACS,IAA3BK,GAAgCA,EAAyBM,GAGzD,OAAO,EAFPhB,KAAKC,qBAAqBV,KAAKa,EAAcE,QAI9C,GAAmC,WAA/BY,GAA0E,WAA/BC,EAAyC,CAE3F,GADAR,EAAsBN,KAClBK,EAAyBM,GAAwBN,EAAyBO,GAG1E,OAAO,EAFPjB,KAAKC,qBAAqBV,KAAKa,EAAcE"},"name":"static/chunks/13.61118903ec06aeff875f.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[13],{\n\n/***/ \"O4ON\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputContainCapitalLetters\", function() { return CheckInputContainCapitalLetters; });\n\r\nclass CheckInputContainCapitalLetters{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let typeofPropertyValue = typeof (propertyValue);\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        let numberOfCapitalLetters = 0;\r\n        let capitalLettersCounter = function (formInputValue) {\r\n            for (let i = 0; i < formInputValue.length; i++) {\r\n                if (formInputValue[i] === formInputValue[i].toUpperCase()\r\n                    && formInputValue[i] !== formInputValue[i].toLowerCase()) {\r\n                    numberOfCapitalLetters++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeofPropertyValue === \"boolean\") {\r\n            if (propertyValue === true) {\r\n                let regex = /[a-z]/;\r\n\r\n                // Regular expression in order to test if all characters are Uppercase\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (propertyValue === false) {\r\n                let regex = /[A-Z]/;\r\n\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n\r\n            capitalLettersCounter(formInputValue);\r\n\r\n            if (propertyValue !== numberOfCapitalLetters) {\r\n                this.validationErrorArray.push(formInputName,propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n            let typeofPropertyValueMinimum = typeof (propertyValueMinimum);\r\n            let typeofPropertyValueMaximum = typeof (propertyValueMaximum);\r\n\r\n\r\n            if (propertyValueMinimum === true && typeofPropertyValueMaximum === \"number\") {\r\n\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n\r\n            } else if (typeofPropertyValueMinimum === \"number\" && propertyValueMaximum === true) {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeofPropertyValueMinimum === \"number\" && typeofPropertyValueMaximum === \"number\") {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters < propertyValueMinimum || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputContainCapitalLetters.js"],"names":[],"mappings":";;;;;;;;;AACO;AACP;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA","file":"x","sourcesContent":["\r\nexport class CheckInputContainCapitalLetters{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let typeofPropertyValue = typeof (propertyValue);\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        let numberOfCapitalLetters = 0;\r\n        let capitalLettersCounter = function (formInputValue) {\r\n            for (let i = 0; i < formInputValue.length; i++) {\r\n                if (formInputValue[i] === formInputValue[i].toUpperCase()\r\n                    && formInputValue[i] !== formInputValue[i].toLowerCase()) {\r\n                    numberOfCapitalLetters++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeofPropertyValue === \"boolean\") {\r\n            if (propertyValue === true) {\r\n                let regex = /[a-z]/;\r\n\r\n                // Regular expression in order to test if all characters are Uppercase\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (propertyValue === false) {\r\n                let regex = /[A-Z]/;\r\n\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n\r\n            capitalLettersCounter(formInputValue);\r\n\r\n            if (propertyValue !== numberOfCapitalLetters) {\r\n                this.validationErrorArray.push(formInputName,propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n            let typeofPropertyValueMinimum = typeof (propertyValueMinimum);\r\n            let typeofPropertyValueMaximum = typeof (propertyValueMaximum);\r\n\r\n\r\n            if (propertyValueMinimum === true && typeofPropertyValueMaximum === \"number\") {\r\n\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n\r\n            } else if (typeofPropertyValueMinimum === \"number\" && propertyValueMaximum === true) {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeofPropertyValueMinimum === \"number\" && typeofPropertyValueMaximum === \"number\") {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters < propertyValueMinimum || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}}