{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[12],{hXj4:function(r,t,o){\"use strict\";o.r(t),o.d(t,\"CheckInputContainNumber\",(function(){return i}));class i{constructor(){this.validationErrorArray=[]}validate(r,t,o,i,e){let n=i.length,a=0,s=function(r){for(let t of r){let r=Number(t);r!==r||\" \"===t||a++}};if(\"object\"===typeof t&&n>0){let r=t[0],n=t[1];!0===r&&\"number\"===typeof n?(s(i),a>n&&this.validationErrorArray.push(o,e)):\"number\"===typeof r&&!0===n?(s(i),a<r&&this.validationErrorArray.push(o,e)):\"number\"===typeof r&&\"number\"===typeof n&&(s(i),(a<r||a>n)&&this.validationErrorArray.push(o,e))}else\"boolean\"===typeof t&&n>0?!0===t?(s(i),a<n&&this.validationErrorArray.push(o,e)):!1===t&&(s(i),a>0&&this.validationErrorArray.push(o,e)):\"number\"===typeof t&&n>0&&(s(i),a!==t&&this.validationErrorArray.push(o,e))}}}}]);","map":{"version":3,"sources":["static/chunks/12.904d3d19db1eb729f7ed.js"],"names":["window","push","hXj4","module","__webpack_exports__","__webpack_require__","r","d","CheckInputContainNumber","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","formInputValueLength","length","numberOfNumbersInFormInput","numberCounter","character","characterAsNumber","Number","propertyValueMinimum","propertyValueMaximum"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,2BAA2B,WAAa,OAAOI,KACzH,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAKhCF,SAASG,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,EAAuBF,EAAeG,OAEtCC,EAA6B,EAC7BC,EAAgB,SAAUL,GAC1B,IAAK,IAAIM,KAAaN,EAAgB,CAClC,IAAIO,EAAoBC,OAAOF,GAC3BC,IAAsBA,GAAmC,MAAdD,GAE3CF,MAKZ,GAA+B,kBAApB,GAAgCF,EAAuB,EAAG,CACjE,IAAIO,EAAuBX,EAAc,GACrCY,EAAuBZ,EAAc,IAGZ,IAAzBW,GAAmE,kBAA3B,GACxCJ,EAAcL,GACVI,EAA6BM,GAC7Bf,KAAKC,qBAAqBV,KAAKa,EAAcE,IAGR,kBAA3B,IAAgE,IAAzBS,GACrDL,EAAcL,GAGVI,EAA6BK,GAC7Bd,KAAKC,qBAAqBV,KAAKa,EAAcE,IAER,kBAA3B,GAAyE,kBAA3B,IAC5DI,EAAcL,IAEVI,EAA6BK,GAAwBL,EAA6BM,IAClFf,KAAKC,qBAAqBV,KAAKa,EAAcE,QAInB,mBAApB,GAAiCC,EAAuB,GAChD,IAAlBJ,GACAO,EAAcL,GACVI,EAA6BF,GAC7BP,KAAKC,qBAAqBV,KAAKa,EAAcE,KAExB,IAAlBH,IAEPO,EAAcL,GACVI,EAA6B,GAC7BT,KAAKC,qBAAqBV,KAAKa,EAAcE,IAIrB,kBAApB,GAAgCC,EAAuB,IACnEG,EAAcL,GACXI,IAA+BN,GAC9BH,KAAKC,qBAAqBV,KAAKa,EAAeE"},"name":"static/chunks/12.904d3d19db1eb729f7ed.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[12],{\n\n/***/ \"hXj4\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputContainNumber\", function() { return CheckInputContainNumber; });\nclass CheckInputContainNumber{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    //verify if the input type is int or float (number)\r\n    //chek if inputs value is a number\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n        let numberOfNumbersInFormInput = 0;\r\n        let numberCounter = function (formInputValue) {\r\n            for (let character of formInputValue) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {\r\n                } else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof (propertyValue) === \"object\" && formInputValueLength > 0) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n\r\n            if (propertyValueMinimum === true && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && propertyValueMaximum === true) {\r\n                numberCounter(formInputValue);\r\n\r\n                // here below : && numberOfNumbersInFormInput > 0 is for empty inputs\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum || numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n\r\n        } else if (typeof (propertyValue) === \"boolean\" && formInputValueLength > 0) {\r\n            if (propertyValue === true) {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput < formInputValueLength) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (propertyValue === false) {\r\n\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > 0) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n        else if (typeof (propertyValue) === \"number\" && formInputValueLength > 0){\r\n            numberCounter(formInputValue);\r\n            if(numberOfNumbersInFormInput !== propertyValue){\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n        }\r\n    }\r\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputContainNumber.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"x","sourcesContent":["export class CheckInputContainNumber{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    //verify if the input type is int or float (number)\r\n    //chek if inputs value is a number\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n        let numberOfNumbersInFormInput = 0;\r\n        let numberCounter = function (formInputValue) {\r\n            for (let character of formInputValue) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {\r\n                } else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof (propertyValue) === \"object\" && formInputValueLength > 0) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n\r\n            if (propertyValueMinimum === true && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && propertyValueMaximum === true) {\r\n                numberCounter(formInputValue);\r\n\r\n                // here below : && numberOfNumbersInFormInput > 0 is for empty inputs\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum || numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n\r\n        } else if (typeof (propertyValue) === \"boolean\" && formInputValueLength > 0) {\r\n            if (propertyValue === true) {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput < formInputValueLength) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (propertyValue === false) {\r\n\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > 0) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n        else if (typeof (propertyValue) === \"number\" && formInputValueLength > 0){\r\n            numberCounter(formInputValue);\r\n            if(numberOfNumbersInFormInput !== propertyValue){\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n        }\r\n    }\r\n}"]}}