{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[16],{xw33:function(r,t,e){\"use strict\";e.r(t),e.d(t,\"CheckInputDateFormat\",(function(){return i}));class i{constructor(){this.validationErrorArray=[]}validate(r,t,e,i,o){let a=t[0],n=t[1],l=t[2][0],s=a.length,u=(n.length,i.length),f=function(r){let t=0;for(let e of r){let r=Number(e);r!==r||\" \"===e||t++}return t},h=0,p=[],d=0,y=[];!function(){for(let r=0;r<s;r++)\"number\"===typeof a[r]&&(h++,p.push(r)),!0===a[r]&&(d++,y.push(r)),!0!==a[r]&&\"number\"!==typeof a[r]&&window.alert(\"FormRider.js ERROR : Property value of dateFormat can only contain values type of number or true\")}();let c=function(r){return/[0-9]/g.test(r)},v=f(i),E=/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g.test(i);let m=function(){let r=0;for(let t=0;t<s;t++)\"number\"===typeof a[t]&&(r+=a[t]);return r}(),A=0;if(!1===c(i[u-1])&&u>0&&this.validationErrorArray.push(e,o),\"\"===l&&u>0)if(!0===E||v!==u&&h===s&&u>0||v===u&&d>0&&u>0||v!==m&&u>0||!0===function(r){return/\\s+/g.test(r)}(i))this.validationErrorArray.push(e,o);else{if(h===s)for(let r=0;r<s;r++){let t=a[r],l=n[r][0],s=n[r][1],u=i.slice(A,A+t);A+=t,(u<l||u>s)&&this.validationErrorArray.push(e,o)}if(1===d)for(let r=0;r<s;r++){let t,l=c(i[A]),s=a[r],f=0;if(\"number\"===typeof s&&(!1===l&&this.validationErrorArray.push(e,o),!0===l)){let a=n[r][0],l=n[r][1];t=i.slice(A,A+s),A+=s,(t<a||t>l)&&this.validationErrorArray.push(e,o)}if(!0===s){!0===l&&this.validationErrorArray.push(e,o);for(let r=A;r<u;r++){let t=c(i[r]);if(!1===t)f++;else if(f>=20)this.validationErrorArray.push(e,o);else if(!0===t){A+=f;break}}}}d>1&&window.alert(\"FormRider.js ERROR ::: Property value of dateFormat more than a single true value located at the propertyDateValueArray[1]\")}if(\"\"!==l&&u>0){let r=function(r,t){return(r.match(t)||[]).length}(i,new RegExp(l,\"g\"));if(r!==s-1&&this.validationErrorArray.push(e,o),r===s-1){let r=i.split(l);for(let t=0;t<s;t++){let i=f(r[t]);if(\"number\"===typeof a[t])if(i!==a[t]||r[t].length!==a[t])this.validationErrorArray.push(e,o);else{let i=n[t][0],a=n[t][1];(r[t]<i||r[t]>a)&&this.validationErrorArray.push(e,o)}if(!0===a[t]){let i=c(r[t]);(r[t].length>12||!0===i)&&this.validationErrorArray.push(e,o)}}}}}}}}]);","map":{"version":3,"sources":["static/chunks/16.fd232931d338e61389d5.js"],"names":["window","push","xw33","module","__webpack_exports__","__webpack_require__","r","d","CheckInputDateFormat","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","propertyDateValueArray","propertyDateLimitationArray","propertyDateSeparator","propertyDateValueArrayLength","length","formInputValueLength","numberCounter","string","numberOfNumbersInFormInput","character","characterAsNumber","Number","numberOfDateValueFieldContainingNumber","indexOfDateValueFieldContainingNumber","numberOfDateValueFieldsContainingTrue","indexOfDateValueFieldContainingTrue","i","alert","checkAllDateValueArrayFieldsType","checkCharacterIfNumber","test","numberOfNumbersInFormInputValue","testForSpecialChars","numberOfNumbersInPropertyDateValueArray","characterNumber","sumOfNumbersInPropertyDateValueArray","startingIndex","doCheckForWhiteSpace","propertyDateValue","propertyDateLimitationMinValue","propertyDateLimitationMaxValue","slicedValue","slice","characterIsNumber","stringLength","x","dateSeparatorNumberInFormInput","regex","match","dateSeparatorCounter","RegExp","formInputValueSplit","split","numberOfNumbersInOneSplit"],"mappings":"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"},"name":"static/chunks/16.fd232931d338e61389d5.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[16],{\n\n/***/ \"xw33\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputDateFormat\", function() { return CheckInputDateFormat; });\nclass CheckInputDateFormat {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        let propertyDateValueArray = propertyValue[0];\r\n        let propertyDateLimitationArray = propertyValue[1];\r\n        let propertyDateSeparator = propertyValue[2][0];\r\n        let propertyDateValueArrayLength = propertyDateValueArray.length;\r\n        let propertyDateLimitationArrayLength = propertyDateLimitationArray.length;\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n\r\n        //=====================================================================================\r\n        let dateSeparatorCounter = function(string, regex) {\r\n                return (string.match(regex) || []).length;\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberCounter = function(string) {\r\n            let numberOfNumbersInFormInput = 0;\r\n\r\n            for (let character of string) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {} else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n            return numberOfNumbersInFormInput;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let sumOfNumbersInPropertyDateValueArray = function() {\r\n            let characterNumber = 0;\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    characterNumber = characterNumber + propertyDateValueArray[i];\r\n                }\r\n            }\r\n            return characterNumber;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberOfDateValueFieldContainingNumber = 0;\r\n        let indexOfDateValueFieldContainingNumber = [];\r\n        let numberOfDateValueFieldsContainingTrue = 0;\r\n        let indexOfDateValueFieldContainingTrue = [];\r\n\r\n\r\n        //check all date values, if it is a number or true, then increment values above here ^\r\n        let checkAllDateValueArrayFieldsType = function() {\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    numberOfDateValueFieldContainingNumber++;\r\n                    indexOfDateValueFieldContainingNumber.push(i);\r\n                }\r\n\r\n                if (propertyDateValueArray[i] === true) {\r\n                    numberOfDateValueFieldsContainingTrue++;\r\n                    indexOfDateValueFieldContainingTrue.push(i);\r\n                }\r\n\r\n\r\n\r\n                //throw an error, when  it is nor true nor number type\r\n                if (propertyDateValueArray[i] !== true && typeof(propertyDateValueArray[i]) !== \"number\") {\r\n                    window.alert(\"FormRider.js ERROR : Property value of dateFormat can only contain values type of number or true\");\r\n                }\r\n            }\r\n        };\r\n        checkAllDateValueArrayFieldsType();\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a character is number, otherwise return false\r\n        let checkCharacterIfNumber = function(character) {\r\n                let regex = /[0-9]/g;\r\n                return regex.test(character);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains white space, otherwise return false\r\n        let doCheckForWhiteSpace = function(string) {\r\n                let regex = /\\s+/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains special characters, otherwise return false\r\n        let doTestStringForSpecialChars = function(string) {\r\n                let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        let numberOfNumbersInFormInputValue = numberCounter(formInputValue);\r\n        let testForSpecialChars = doTestStringForSpecialChars(formInputValue);\r\n        let numberOfNumbersInPropertyDateValueArray = sumOfNumbersInPropertyDateValueArray();\r\n        let startingIndex = 0;\r\n\r\n\r\n        if (checkCharacterIfNumber(formInputValue[formInputValueLength - 1]) === false && formInputValueLength > 0) {\r\n            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n        }\r\n\r\n\r\n        //when there is no separator\r\n        if (propertyDateSeparator === \"\" && formInputValueLength > 0) {\r\n            /*  ERROR CASES MANAGEMENT\r\n                -if the input is not only numbers but but JSON said the input should be only numbers\r\n                -if the input is only numbers but JSON said it should be numbers and characters\r\n                -if sum of numbers in JSON is not equal to number of numbers in form input\r\n                -if there is white spaces in the input\r\n            * */\r\n            if ((testForSpecialChars === true) ||\r\n                ((numberOfNumbersInFormInputValue !== formInputValueLength && numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue === formInputValueLength && numberOfDateValueFieldsContainingTrue > 0) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue !== numberOfNumbersInPropertyDateValueArray) && (formInputValueLength > 0)) ||\r\n                doCheckForWhiteSpace(formInputValue) === true) {\r\n\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                //another way of saying that JSON wants \"Input should contain only numbers\"\r\n                if (numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n\r\n                        let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                        let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                        let slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                        startingIndex += propertyDateValue;\r\n\r\n                        // incrementing the startingIndex so next value will be a new slice\r\n                        if (slicedValue < propertyDateLimitationMinValue ||\r\n                            slicedValue > propertyDateLimitationMaxValue) {\r\n\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //====================================================================================================\r\n                // IT SHOULD CONTAIN a STRING e.g. 04september1994\r\n                if (numberOfDateValueFieldsContainingTrue === 1) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValue[startingIndex]);\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n                        let stringLength = 0;\r\n                        let slicedValue;\r\n\r\n\r\n\r\n                        if (typeof(propertyDateValue) === \"number\") {\r\n\r\n                            //thi\"s might only catch the first character in the input\r\n                            if (characterIsNumber === false) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n\r\n                            if (characterIsNumber === true) {\r\n                                let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                                let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                                slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                                startingIndex += propertyDateValue;\r\n\r\n\r\n                                if (slicedValue < propertyDateLimitationMinValue ||\r\n                                    slicedValue > propertyDateLimitationMaxValue) {\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (propertyDateValue === true) {\r\n\r\n                            if (characterIsNumber === true) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n                            for (let x = startingIndex; x < formInputValueLength; x++) {\r\n\r\n                                let characterIsNumber = checkCharacterIfNumber(formInputValue[x]);\r\n\r\n                                if (characterIsNumber === false) {\r\n                                    stringLength++;\r\n                                } else if (stringLength >= 20) {\r\n\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                } else if (characterIsNumber === true) {\r\n                                    startingIndex += stringLength;\r\n\r\n                                    //get out of loop if it encounters a number\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //when there is more than one field in property date value containing true\r\n                if (numberOfDateValueFieldsContainingTrue > 1) {\r\n                    window.alert(\"FormRider.js ERROR ::: Property value of dateFormat more than a single true value located at the propertyDateValueArray[1]\");\r\n                }\r\n                //====================================================================================================\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //when there is a separator\r\n        if (propertyDateSeparator !== \"\" && formInputValueLength > 0) {\r\n            let dateSeparatorRegex = new RegExp(propertyDateSeparator, \"g\");\r\n\r\n            //number of date separator in formInput\r\n            let dateSeparatorNumberInFormInput = dateSeparatorCounter(formInputValue, dateSeparatorRegex);\r\n\r\n            if (dateSeparatorNumberInFormInput !== propertyDateValueArrayLength - 1) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n\r\n            if (dateSeparatorNumberInFormInput === propertyDateValueArrayLength - 1) {\r\n                let formInputValueSplit = formInputValue.split(propertyDateSeparator);\r\n                for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                    let numberOfNumbersInOneSplit = numberCounter(formInputValueSplit[i]);\r\n\r\n                    if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                        if (numberOfNumbersInOneSplit !== propertyDateValueArray[i] ||\r\n                            formInputValueSplit[i].length !== propertyDateValueArray[i]) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        } else {\r\n                            let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                            let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                            if (formInputValueSplit[i] < propertyDateLimitationMinValue ||\r\n                                formInputValueSplit[i] > propertyDateLimitationMaxValue) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (propertyDateValueArray[i] === true) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValueSplit[i]);\r\n\r\n\r\n                        if ((formInputValueSplit[i].length > 12) ||\r\n                            (characterIsNumber === true)) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputDateFormat.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA,mCAAmC,kCAAkC;;AAErE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,uDAAuD,0BAA0B;;AAEjF;;AAEA;AACA;AACA,iCAAiC;;AAEjC;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,kCAAkC;AACjE;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"x","sourcesContent":["export class CheckInputDateFormat {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        let propertyDateValueArray = propertyValue[0];\r\n        let propertyDateLimitationArray = propertyValue[1];\r\n        let propertyDateSeparator = propertyValue[2][0];\r\n        let propertyDateValueArrayLength = propertyDateValueArray.length;\r\n        let propertyDateLimitationArrayLength = propertyDateLimitationArray.length;\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n\r\n        //=====================================================================================\r\n        let dateSeparatorCounter = function(string, regex) {\r\n                return (string.match(regex) || []).length;\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberCounter = function(string) {\r\n            let numberOfNumbersInFormInput = 0;\r\n\r\n            for (let character of string) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {} else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n            return numberOfNumbersInFormInput;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let sumOfNumbersInPropertyDateValueArray = function() {\r\n            let characterNumber = 0;\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    characterNumber = characterNumber + propertyDateValueArray[i];\r\n                }\r\n            }\r\n            return characterNumber;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberOfDateValueFieldContainingNumber = 0;\r\n        let indexOfDateValueFieldContainingNumber = [];\r\n        let numberOfDateValueFieldsContainingTrue = 0;\r\n        let indexOfDateValueFieldContainingTrue = [];\r\n\r\n\r\n        //check all date values, if it is a number or true, then increment values above here ^\r\n        let checkAllDateValueArrayFieldsType = function() {\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    numberOfDateValueFieldContainingNumber++;\r\n                    indexOfDateValueFieldContainingNumber.push(i);\r\n                }\r\n\r\n                if (propertyDateValueArray[i] === true) {\r\n                    numberOfDateValueFieldsContainingTrue++;\r\n                    indexOfDateValueFieldContainingTrue.push(i);\r\n                }\r\n\r\n\r\n\r\n                //throw an error, when  it is nor true nor number type\r\n                if (propertyDateValueArray[i] !== true && typeof(propertyDateValueArray[i]) !== \"number\") {\r\n                    window.alert(\"FormRider.js ERROR : Property value of dateFormat can only contain values type of number or true\");\r\n                }\r\n            }\r\n        };\r\n        checkAllDateValueArrayFieldsType();\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a character is number, otherwise return false\r\n        let checkCharacterIfNumber = function(character) {\r\n                let regex = /[0-9]/g;\r\n                return regex.test(character);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains white space, otherwise return false\r\n        let doCheckForWhiteSpace = function(string) {\r\n                let regex = /\\s+/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains special characters, otherwise return false\r\n        let doTestStringForSpecialChars = function(string) {\r\n                let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        let numberOfNumbersInFormInputValue = numberCounter(formInputValue);\r\n        let testForSpecialChars = doTestStringForSpecialChars(formInputValue);\r\n        let numberOfNumbersInPropertyDateValueArray = sumOfNumbersInPropertyDateValueArray();\r\n        let startingIndex = 0;\r\n\r\n\r\n        if (checkCharacterIfNumber(formInputValue[formInputValueLength - 1]) === false && formInputValueLength > 0) {\r\n            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n        }\r\n\r\n\r\n        //when there is no separator\r\n        if (propertyDateSeparator === \"\" && formInputValueLength > 0) {\r\n            /*  ERROR CASES MANAGEMENT\r\n                -if the input is not only numbers but but JSON said the input should be only numbers\r\n                -if the input is only numbers but JSON said it should be numbers and characters\r\n                -if sum of numbers in JSON is not equal to number of numbers in form input\r\n                -if there is white spaces in the input\r\n            * */\r\n            if ((testForSpecialChars === true) ||\r\n                ((numberOfNumbersInFormInputValue !== formInputValueLength && numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue === formInputValueLength && numberOfDateValueFieldsContainingTrue > 0) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue !== numberOfNumbersInPropertyDateValueArray) && (formInputValueLength > 0)) ||\r\n                doCheckForWhiteSpace(formInputValue) === true) {\r\n\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                //another way of saying that JSON wants \"Input should contain only numbers\"\r\n                if (numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n\r\n                        let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                        let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                        let slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                        startingIndex += propertyDateValue;\r\n\r\n                        // incrementing the startingIndex so next value will be a new slice\r\n                        if (slicedValue < propertyDateLimitationMinValue ||\r\n                            slicedValue > propertyDateLimitationMaxValue) {\r\n\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //====================================================================================================\r\n                // IT SHOULD CONTAIN a STRING e.g. 04september1994\r\n                if (numberOfDateValueFieldsContainingTrue === 1) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValue[startingIndex]);\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n                        let stringLength = 0;\r\n                        let slicedValue;\r\n\r\n\r\n\r\n                        if (typeof(propertyDateValue) === \"number\") {\r\n\r\n                            //thi\"s might only catch the first character in the input\r\n                            if (characterIsNumber === false) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n\r\n                            if (characterIsNumber === true) {\r\n                                let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                                let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                                slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                                startingIndex += propertyDateValue;\r\n\r\n\r\n                                if (slicedValue < propertyDateLimitationMinValue ||\r\n                                    slicedValue > propertyDateLimitationMaxValue) {\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (propertyDateValue === true) {\r\n\r\n                            if (characterIsNumber === true) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n                            for (let x = startingIndex; x < formInputValueLength; x++) {\r\n\r\n                                let characterIsNumber = checkCharacterIfNumber(formInputValue[x]);\r\n\r\n                                if (characterIsNumber === false) {\r\n                                    stringLength++;\r\n                                } else if (stringLength >= 20) {\r\n\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                } else if (characterIsNumber === true) {\r\n                                    startingIndex += stringLength;\r\n\r\n                                    //get out of loop if it encounters a number\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //when there is more than one field in property date value containing true\r\n                if (numberOfDateValueFieldsContainingTrue > 1) {\r\n                    window.alert(\"FormRider.js ERROR ::: Property value of dateFormat more than a single true value located at the propertyDateValueArray[1]\");\r\n                }\r\n                //====================================================================================================\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //when there is a separator\r\n        if (propertyDateSeparator !== \"\" && formInputValueLength > 0) {\r\n            let dateSeparatorRegex = new RegExp(propertyDateSeparator, \"g\");\r\n\r\n            //number of date separator in formInput\r\n            let dateSeparatorNumberInFormInput = dateSeparatorCounter(formInputValue, dateSeparatorRegex);\r\n\r\n            if (dateSeparatorNumberInFormInput !== propertyDateValueArrayLength - 1) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n\r\n            if (dateSeparatorNumberInFormInput === propertyDateValueArrayLength - 1) {\r\n                let formInputValueSplit = formInputValue.split(propertyDateSeparator);\r\n                for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                    let numberOfNumbersInOneSplit = numberCounter(formInputValueSplit[i]);\r\n\r\n                    if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                        if (numberOfNumbersInOneSplit !== propertyDateValueArray[i] ||\r\n                            formInputValueSplit[i].length !== propertyDateValueArray[i]) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        } else {\r\n                            let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                            let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                            if (formInputValueSplit[i] < propertyDateLimitationMinValue ||\r\n                                formInputValueSplit[i] > propertyDateLimitationMaxValue) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (propertyDateValueArray[i] === true) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValueSplit[i]);\r\n\r\n\r\n                        if ((formInputValueSplit[i].length > 12) ||\r\n                            (characterIsNumber === true)) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}}