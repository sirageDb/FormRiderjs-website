{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[16],{BCIP:function(r,t,i){\"use strict\";i.r(t),i.d(t,\"CheckInputContainSpecialCharacters\",(function(){return e}));class e{constructor(){this.validationErrorArray=[]}validate(r,t,i,e,n){let o=function(r){return r.length>0||0!==r.length&&void 0},a=/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g,s=(e.match(a)||[]).length;let u=e.length;if(!0===t){if(!(u>s))return!0;this.validationErrorArray.push(i,n)}else if(!1===t){if(!a.test(e))return!0;this.validationErrorArray.push(i,n)}if(\"number\"===typeof t&&o(e)){if(s===t)return!0;this.validationErrorArray.push(i,n)}if(\"object\"===typeof t&&o(e)){let r=t[0],e=t[1];if(\"number\"===typeof r&&!0===e){if(!(s<r))return!0;this.validationErrorArray.push(i,n)}else if(!0===r&&\"number\"===typeof e){if(!(s>e))return!0;this.validationErrorArray.push(i,n)}else\"number\"===typeof r&&\"number\"===typeof e&&(s<r||s>e)&&this.validationErrorArray.push(i,n)}}}}}]);","map":{"version":3,"sources":["static/chunks/16.307b2bf9c534ef2e02a5.js"],"names":["window","push","BCIP","module","__webpack_exports__","__webpack_require__","r","d","CheckInputContainSpecialCharacters","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","inputIsBeingUsed","length","regex","numberOfSpecialCharacters","match","formInputLength","test","propertyValueMinimum","propertyValueMaximum"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,sCAAsC,WAAa,OAAOI,KACpI,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAIhCF,SAASG,EAAwBC,EAAeC,EAAeC,EAAgBC,GAI3E,IAAIC,EAAmB,SAASF,GAC5B,OAAGA,EAAeG,OAAS,GAGE,IAA1BH,EAAeG,aAAlB,GAOAC,EAAQ,yCAIRC,GAAkDL,EAFnCM,MAAMF,IAAU,IAAID,OAIvC,IAAII,EAAkBP,EAAeG,OAIjC,IAAsB,IAAlBL,EAAwB,CACxB,KAAIS,EAAkBF,GAGlB,OAAO,EAFPV,KAAKC,qBAAqBV,KAAKa,EAAeE,QAI/C,IAAsB,IAAlBH,EAAyB,CAChC,IAAIM,EAAMI,KAAKR,GAGX,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAeE,GAM1D,GAA+B,kBAApB,GAAgCC,EAAiBF,GAAiB,CACzE,GAAIK,IAA8BP,EAG9B,OAAO,EAFPH,KAAKC,qBAAqBV,KAAKa,EAAeE,GAKtD,GAA+B,kBAApB,GAAgCC,EAAiBF,GAAiB,CACzE,IAAIS,EAAuBX,EAAc,GACrCY,EAAuBZ,EAAc,GAEzC,GAAsC,kBAA3B,IACqB,IAAzBY,EAA+B,CAClC,KAAIL,EAA4BI,GAG5B,OAAO,EAFPd,KAAKC,qBAAqBV,KAAKa,EAAeE,QAI/C,IAA6B,IAAzBQ,GAC8B,kBAA3B,EAAqC,CAE/C,KAAIJ,EAA4BK,GAG5B,OAAO,EAFPf,KAAKC,qBAAqBV,KAAKa,EAAeE,OAIT,kBAA3B,GACuB,kBAA3B,IAENI,EAA4BI,GACzBJ,EAA4BK,IAC/Bf,KAAKC,qBAAqBV,KAAKa,EAAeE"},"name":"static/chunks/16.307b2bf9c534ef2e02a5.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[16],{\n\n/***/ \"BCIP\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputContainSpecialCharacters\", function() { return CheckInputContainSpecialCharacters; });\nclass CheckInputContainSpecialCharacters {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n        let specialCharacterCount = (string) => {\r\n            return (string.match(regex) || []).length;\r\n        };\r\n        let numberOfSpecialCharacters = specialCharacterCount(formInputValue);\r\n\r\n        let formInputLength = formInputValue.length;\r\n\r\n        if (typeof (propertyValue === \"boolean\")) {\r\n\r\n            if (propertyValue === true) {\r\n                if (formInputLength > numberOfSpecialCharacters) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValue === false) {\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n            if (numberOfSpecialCharacters !== propertyValue) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n            if (typeof (propertyValueMinimum) === \"number\"\r\n                && propertyValueMaximum === true) {\r\n                if (numberOfSpecialCharacters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValueMinimum === true\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\"\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters < propertyValueMinimum\r\n                    || numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputContainSpecialCharacters.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"x","sourcesContent":["export class CheckInputContainSpecialCharacters {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n        let specialCharacterCount = (string) => {\r\n            return (string.match(regex) || []).length;\r\n        };\r\n        let numberOfSpecialCharacters = specialCharacterCount(formInputValue);\r\n\r\n        let formInputLength = formInputValue.length;\r\n\r\n        if (typeof (propertyValue === \"boolean\")) {\r\n\r\n            if (propertyValue === true) {\r\n                if (formInputLength > numberOfSpecialCharacters) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValue === false) {\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n            if (numberOfSpecialCharacters !== propertyValue) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n            if (typeof (propertyValueMinimum) === \"number\"\r\n                && propertyValueMaximum === true) {\r\n                if (numberOfSpecialCharacters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValueMinimum === true\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\"\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters < propertyValueMinimum\r\n                    || numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]}}