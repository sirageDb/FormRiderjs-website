{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[24],{DN1G:function(t,i,n){\"use strict\";n.r(i),n.d(i,\"CheckInputRequired\",(function(){return r}));class r{constructor(){this.validationErrorArray=[],this.inCommonValidatedStatus=!1}validateInCommon(t,i,n,r,a){if(\"object\"===typeof i){let t=/^\\s+/;(t.test(String(r))||0===r.length)&&(this.validationErrorArray.push(i,a),this.inCommonValidatedStatus=!1),\"undefined\"===typeof r&&(this.validationErrorArray.push(i,a),this.inCommonValidatedStatus=!1),t.test(String(r))||0===r.length||(this.validationErrorArray.push(i,a),this.inCommonValidatedStatus=!0)}}validate(t,i,n,r,a){if(!0===i){(/^\\s+/.test(String(r))||0===r.length||\"undefined\"===typeof r)&&this.validationErrorArray.push(n,a)}}}}}]);","map":{"version":3,"sources":["static/chunks/24.3620a69b413620bfc73a.js"],"names":["window","push","DN1G","module","__webpack_exports__","__webpack_require__","r","d","CheckInputRequired","[object Object]","this","validationErrorArray","inCommonValidatedStatus","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","regex","test","String","length"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,sBAAsB,WAAa,OAAOI,KACpH,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAC5BD,KAAKE,yBAA0B,EAInCH,iBAAiBI,EAAwBC,EAAeC,EAAeC,EAAgBC,GACnF,GAA+B,kBAApB,EAA8B,CAErC,IAAIC,EAAQ,QACRA,EAAMC,KAAKC,OAAOJ,KAA8C,IAA1BA,EAAeK,UACrDX,KAAKC,qBAAqBV,KAAKa,EAAeG,GAC9CP,KAAKE,yBAA0B,GAEH,qBAArB,IACPF,KAAKC,qBAAqBV,KAAKa,EAAeG,GAC9CP,KAAKE,yBAA0B,GAE9BM,EAAMC,KAAKC,OAAOJ,KAA8C,IAA1BA,EAAeK,SAEtDX,KAAKC,qBAAqBV,KAAKa,EAAeG,GAC9CP,KAAKE,yBAA0B,IAM3CH,SAASI,EAAwBC,EAAeC,EAAeC,EAAgBC,GAE3E,IAAsB,IAAlBH,EAAwB,EACZ,OACFK,KAAKC,OAAOJ,KAA8C,IAA1BA,EAAeK,QAElB,qBAArB,IADdX,KAAKC,qBAAqBV,KAAKc,EAAeE"},"name":"static/chunks/24.3620a69b413620bfc73a.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[24],{\n\n/***/ \"DN1G\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputRequired\", function() { return CheckInputRequired; });\nclass CheckInputRequired {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n        this.inCommonValidatedStatus = false;\r\n    }\r\n\r\n\r\n    validateInCommon(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        if (typeof (propertyValue) === \"object\") {\r\n\r\n            let regex = /^\\s+/;\r\n            if (regex.test(String(formInputValue)) || formInputValue.length === 0) {\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = false;\r\n            }\r\n            if (typeof (formInputValue) === \"undefined\") {\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = false;\r\n            }\r\n            if (!regex.test(String(formInputValue)) && formInputValue.length !== 0) {\r\n                //we pushing even when validated because otherwise when checking all checkboxes we will get an empty validation error array and it wont get purified later, so inCommonGivenPoints wont even get noticed\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n        if (propertyValue === true) {\r\n            let regex = /^\\s+/;\r\n            if (regex.test(String(formInputValue)) || formInputValue.length === 0) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else if (typeof (formInputValue) === \"undefined\") {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n        }\r\n    }\r\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputRequired.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,C","file":"x","sourcesContent":["export class CheckInputRequired {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n        this.inCommonValidatedStatus = false;\r\n    }\r\n\r\n\r\n    validateInCommon(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        if (typeof (propertyValue) === \"object\") {\r\n\r\n            let regex = /^\\s+/;\r\n            if (regex.test(String(formInputValue)) || formInputValue.length === 0) {\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = false;\r\n            }\r\n            if (typeof (formInputValue) === \"undefined\") {\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = false;\r\n            }\r\n            if (!regex.test(String(formInputValue)) && formInputValue.length !== 0) {\r\n                //we pushing even when validated because otherwise when checking all checkboxes we will get an empty validation error array and it wont get purified later, so inCommonGivenPoints wont even get noticed\r\n                this.validationErrorArray.push(propertyValue, propertyErrorText);\r\n                this.inCommonValidatedStatus = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n        if (propertyValue === true) {\r\n            let regex = /^\\s+/;\r\n            if (regex.test(String(formInputValue)) || formInputValue.length === 0) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else if (typeof (formInputValue) === \"undefined\") {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n        }\r\n    }\r\n}"]}}