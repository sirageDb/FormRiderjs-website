{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{BiHr:function(n,r,t){\"use strict\";t.r(r),t.d(r,\"CheckInputMaxLength\",(function(){return i}));class i{constructor(){this.validationErrorArray=[]}validate(n,r,t,i,o){if(!((i=i.toString()).length>r&&function(n){return n.length>0||0!==n.length&&void 0}(i)))return!0;this.validationErrorArray.push(t,o)}}}}]);","map":{"version":3,"sources":["static/chunks/18.b00b7e67afce83d857db.js"],"names":["window","push","BiHr","module","__webpack_exports__","__webpack_require__","r","d","CheckInputMaxLength","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","toString","length","inputIsBeingUsed"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,uBAAuB,WAAa,OAAOI,KACrH,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAKhCF,SAASG,EAAwBC,EAAeC,EAAeC,EAAgBC,GAe3E,MADAD,EAAiBA,EAAeE,YACbC,OAASL,GAZL,SAAUE,GAC7B,OAAIA,EAAeG,OAAS,GAGE,IAA1BH,EAAeG,aAAnB,EAQyCC,CAAiBJ,IAG1D,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAcE"},"name":"static/chunks/18.b00b7e67afce83d857db.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[18],{\n\n/***/ \"BiHr\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputMaxLength\", function() { return CheckInputMaxLength; });\nclass CheckInputMaxLength {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n\r\n    }\r\n\r\n    //check input max length, this function is sensible to empty space\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function (formInputValue) {\r\n            if (formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if (formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        formInputValue = formInputValue.toString();\r\n        if (formInputValue.length > propertyValue && inputIsBeingUsed(formInputValue)) {\r\n            this.validationErrorArray.push(formInputName,propertyErrorText);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputMaxLength.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA","file":"x","sourcesContent":["export class CheckInputMaxLength {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n\r\n    }\r\n\r\n    //check input max length, this function is sensible to empty space\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function (formInputValue) {\r\n            if (formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if (formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        formInputValue = formInputValue.toString();\r\n        if (formInputValue.length > propertyValue && inputIsBeingUsed(formInputValue)) {\r\n            this.validationErrorArray.push(formInputName,propertyErrorText);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n"]}}