{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{KqvW:function(r,t,i){\"use strict\";i.r(t),i.d(t,\"CheckInputContainWhiteSpace\",(function(){return n}));class n{constructor(){this.validationErrorArray=[]}validate(r,t,i,n,s){let a=t[0],e=t[1],o=/^\\s/;if(!1===a&&!1===e){if(!/\\s+/g.test(n))return!0;this.validationErrorArray.push(i,s)}else{if(!0!==a||!1!==e)return!0;if(!o.test(n))return!0;this.validationErrorArray.push(i,s)}}}}}]);","map":{"version":3,"sources":["static/chunks/17.e84a13ae12764764888d.js"],"names":["window","push","KqvW","module","__webpack_exports__","__webpack_require__","r","d","CheckInputContainWhiteSpace","[object Object]","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","propertyContain","propertyStart","regexPropertyStart","test"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,+BAA+B,WAAa,OAAOI,KAC7H,MAAMA,EACFC,cACIC,KAAKC,qBAAuB,GAEhCF,SAASG,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,EAAkBJ,EAAc,GAChCK,EAAgBL,EAAc,GAE9BM,EAAqB,MAIzB,IAAwB,IAApBF,IAA+C,IAAlBC,EAAyB,CACtD,IAJuB,OAIEE,KAAKL,GAG1B,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAeE,OAK/C,CAAA,IAAwB,IAApBC,IAA8C,IAAlBC,EAQnC,OAAO,EAPP,IAAIC,EAAmBC,KAAKL,GAGxB,OAAO,EAFPL,KAAKC,qBAAqBV,KAAKa,EAAeE"},"name":"static/chunks/17.e84a13ae12764764888d.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[17],{\n\n/***/ \"KqvW\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckInputContainWhiteSpace\", function() { return CheckInputContainWhiteSpace; });\nclass CheckInputContainWhiteSpace {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let propertyContain = propertyValue[0];\r\n        let propertyStart = propertyValue[1];\r\n\r\n        let regexPropertyStart = /^\\s/;\r\n        let regexPropertyContain = /\\s+/g;\r\n\r\n        //cannot contain and cannot start\r\n        if (propertyContain === false && propertyStart === false) {\r\n            if (regexPropertyContain.test(formInputValue)) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n            //can contain but cannot start with white spaces\r\n        } else if (propertyContain === true && propertyStart === false) {\r\n            if (regexPropertyStart.test(formInputValue)) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n            //can contain and can start\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:\\Me\\Amigos\\formriderjs\\FormRiderjs-website\\node_modules\\formriderjs\\src\\validators\\checkInputContainWhiteSpace.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C","file":"x","sourcesContent":["export class CheckInputContainWhiteSpace {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let propertyContain = propertyValue[0];\r\n        let propertyStart = propertyValue[1];\r\n\r\n        let regexPropertyStart = /^\\s/;\r\n        let regexPropertyContain = /\\s+/g;\r\n\r\n        //cannot contain and cannot start\r\n        if (propertyContain === false && propertyStart === false) {\r\n            if (regexPropertyContain.test(formInputValue)) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n            //can contain but cannot start with white spaces\r\n        } else if (propertyContain === true && propertyStart === false) {\r\n            if (regexPropertyStart.test(formInputValue)) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n            //can contain and can start\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}"]}}